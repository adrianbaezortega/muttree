#!/bin/bash

#
# MUTTREE: A PIPELINE FOR PHYLOGENETIC TREE CONSTRUCTION AND RECURRENT MUTATION DISCOVERY
#
# Adrian Baez-Ortega (ab2324@cam.ac.uk)
# Transmissible Cancer Group, University of Cambridge
# 2016
#

# muttree: Core script

# INPUT
# -i  Input FASTA nucleotide sequence file (one sequence per sample)
# -g  Gene table as a tab-delimited text file with two columns:
#      i)  Gene name
#      ii) Start position in the input sequence
# -o  Output folder
# -t  Number of RAxML threads (CPUs) [optional]
# -r  Custom options for RAxML [optional]
# -a  Custom options for RAxML's ancestral sequence reconstruction [optional]



VERSION=1.0
SRCDIR="${BASH_SOURCE%/*}"
TREESUB="${SRCDIR%/*}"/treesub-TCG
RAXMLDEF="-f a -m GTRGAMMA -# autoMRE -x 931078 -p 272730"
ANCESTDEF="-m GTRGAMMA"



####################################### FUNCTIONS #######################################

# AUXILIARY FUNCTIONS
# print_help()
# Prints a help guide if -h (or no arguments) is specified
print_help() {
    echo
    echo
    echo "| MUTTREE"
    echo "| A pipeline for phylogenetic tree construction and recurrent mutation discovery"
    echo "| Version $VERSION"
    echo "|"    
    echo "| Required input:"
    echo "|    -i  Full path to the input nucleotide FASTA file"
    echo "|         (one coding sequence per sample, without stop codons; first sample will be the reference)"
    echo "|    -g  Full path to the gene table, defined as a tab-delimited file with two columns:"
    echo "|          i) Gene symbol"
    echo "|         ii) Start position in the input sequence"
    echo "|    -o  Full path to the output folder (it will be created if needed)"
    echo "|"
    echo "| Optional input:"
    echo "|    -t  Number of RAxML threads (CPUs)"
    echo "|    -r  Custom options for RAxML's tree construction (within quotes, all necessary options except -s, -n, -w and -T)"
    echo "|    -a  Custom options for RAxML's ancestral sequence reconstruction (same format as -r)"
    echo "|"
    echo "| Options:"
    echo "|    -h  Print this usage information and exit"
    echo "|    -v  Print version and exit"
    echo "|"
    echo "| Usage:"
    echo "|    muttree -i /path/to/seqs.fna -o /path/to/out_dir -g /path/to/gene_table.txt -t 8 -r \"-m GTRGAMMA -# 10 -p 12345\" -a \"-m GTRGAMMA --HKY85 -M\""
    echo
    echo
}


# check_file()
# Checks if a file exists and is not empty. In that case, it displays an error message and exits
# Used for checking the output of each step
check_file() {

    if [ ! -s $1 ]; then
        echo -e "\nERROR: Output file $1 was not correctly generated. Please check the logs folder for more information.\n" >&2
        exit 1
    fi
    
}



# PIPELINE STEPS
# 1) process_seqs()
# Create input PHYLIP file for RAxML
process_seqs() {

    # Create directory for output files
    mkdir -p $OUTDIR/1_process_seqs

    # Get number of sequences and sequence length
    NSEQ=`wc -l $SEQS | awk '{print $1}'`
    NSEQ=$(( NSEQ / 2 ))
    LEN=`head -2 $SEQS | wc -L`
    
    # Transform sequences to PHYLIP format, relabelling them for compatibility with treesub
    rm -f $OUTDIR/1_process_seqs/alignment.names
    echo "$NSEQ $LEN" > $OUTDIR/1_process_seqs/alignment.raxml.phylip
    N=1; IDX=1
    while read LINE; do
        if (( N % 2 )); then
            echo ${LINE#?} >> $OUTDIR/1_process_seqs/alignment.names
        else
            echo "seq_$IDX    $LINE" >> $OUTDIR/1_process_seqs/alignment.raxml.phylip
            IDX=$(( IDX + 1 ))
        fi
    N=$(( N + 1 ))
    done < $SEQS
    
}


# 2) build_tree()
# Uses RAxML to produce a maximum likelihood tree and a bootstrap support tree (by default)
build_tree() {

    # Create directory for output files
    mkdir -p $OUTDIR/2_build_tree
    mkdir -p $OUTDIR/Output
    
    # Include parameter -T depending on number of CPUs
    if [ $CPUS -gt 1 ]; then
        THREADS="-T $CPUS"
    else
        THREADS=""
    fi
    
    # Use custom options if provided
    rm -f $OUTDIR/2_build_tree/*.RECON
    if [ "$RAXMLOPT" != "no" ]; then
        echo -e "    Running $RAXML with $CPUS CPU(s) and custom options: $RAXMOLPT"
        echo -e "    Log files in $OUTDIR/logs/2_build_tree.log and $OUTDIR/2_build_tree/RAxML_info.RECON"
        $RAXML -s $OUTDIR/1_process_seqs/alignment.raxml.phylip -n RECON -w $OUTDIR/2_build_tree --print-identical-sequences $THREADS $RAXMLOPT &> $OUTDIR/logs/2_build_tree.log
    else
        echo -e "    Running $RAXML with $CPUS CPU(s) and default options: $RAXMLDEF"
        echo -e "    Log files in $OUTDIR/logs/2_build_tree.log and $OUTDIR/2_build_tree/RAxML_info.RECON"
        $RAXML -s $OUTDIR/1_process_seqs/alignment.raxml.phylip -n RECON -w $OUTDIR/2_build_tree --print-identical-sequences $THREADS $RAXMLDEF &> $OUTDIR/logs/2_build_tree.log
    fi
    
    # If bootstrap was performed: relabel bootstrap tree and put it in the output folder
    if [ -s $OUTDIR/2_build_tree/RAxML_bootstrap.RECON ]; then
        cp $OUTDIR/2_build_tree/RAxML_bootstrap.RECON $OUTDIR/Output/Muttree_Bootstrap_Unrooted.newick.tree
        IDX=1
        while read LINE; do 
            sed -i "s#seq_$IDX:#$LINE:#g" $OUTDIR/Output/Muttree_Bootstrap_Unrooted.newick.tree
            IDX=$(( IDX + 1 ))
        done < $OUTDIR/1_process_seqs/alignment.names
    fi

}


# 3) root_tree()
# Uses treesub to root the ML tree using the reference sequence provided
root_tree() {

    # Create directory for output files
    mkdir -p $OUTDIR/3_root_tree
    
    # Run treesub
    echo -e "    Log file in $OUTDIR/logs/3_root_tree.log"
    java -Xmx512m -cp $TREESUB/dist/treesub.jar treesub.tree.TreeRerooter $OUTDIR/2_build_tree/RAxML_bestTree.RECON $OUTDIR/3_root_tree/RAxML_bestTree.RECON.rooted &> $OUTDIR/logs/3_root_tree.log

}


# 4) ancestral_seqs()
# Uses RAxML to perform ancestral sequence reconstruction on the ML tree
ancestral_seqs() {

    # Create directory for output files
    mkdir -p $OUTDIR/4_ancestral_seqs
    
    # Create a one-line version of the rooted tree
    tr -d '\n' < $OUTDIR/3_root_tree/RAxML_bestTree.RECON.rooted > $OUTDIR/4_ancestral_seqs/RAxML_bestTree.RECON.rooted
    
    # Use reduced alignment file if present
    if [ -s $1 $OUTDIR/1_process_seqs/alignment.raxml.phylip.reduced ]; then
        FILE=$OUTDIR/1_process_seqs/alignment.raxml.phylip.reduced
    else
        FILE=$OUTDIR/1_process_seqs/alignment.raxml.phylip
    fi
    
    # Run RAxML
    if [ $CPUS -gt 1 ]; then
        THREADS="-T $CPUS"
    else
        THREADS=""
    fi
    
    rm -f $OUTDIR/4_ancestral_seqs/*.ASR
        if [ "$ANCESTOPT" != "no" ]; then
        echo -e "    Running $RAXML with $CPUS CPU(s) and custom options: -f A $ANCESTOPT"
        echo -e "    Log files in $OUTDIR/logs/4_ancestral_seqs.log and $OUTDIR/4_ancestral_seqs/RAxML_info.ASR"
        $RAXML -f A -s $FILE -t $OUTDIR/4_ancestral_seqs/RAxML_bestTree.RECON.rooted -n ASR -w $OUTDIR/4_ancestral_seqs $THREADS $ANCESTOPT &> $OUTDIR/logs/4_ancestral_seqs.log
    else
        echo -e "    Running $RAXML with $CPUS CPU(s) and default options: -f A $ANCESTDEF"
        echo -e "    Log files in $OUTDIR/logs/4_ancestral_seqs.log and $OUTDIR/4_ancestral_seqs/RAxML_info.ASR"
        $RAXML -f A -s $FILE -t $OUTDIR/4_ancestral_seqs/RAxML_bestTree.RECON.rooted -n ASR -w $OUTDIR/4_ancestral_seqs $THREADS $ANCESTDEF &> $OUTDIR/logs/4_ancestral_seqs.log
    fi
    
}


# 5) annotate_tree()
# Uses treesub to annotate the mutations in each branch of the tree
annotate_tree() {

    # Create directory for output files
    mkdir -p $OUTDIR/5_annotate_tree
    
    # Run treesub
    echo -e "    Log file in $OUTDIR/logs/5_annotate_tree.log"
    #java -Xmx2g -cp $TREESUB/dist/treesub.jar treesub.ancestral.ParseRST $OUTDIR/1_process_seqs $OUTDIR/4_ancestral_seqs $OUTDIR/5_annotate_tree &> $OUTDIR/logs/5_annotate_tree.log
    # For very large data sets: reserve 50G of mem (comment line above, uncomment line below)
    java -Xmx50g -cp $TREESUB/dist/treesub.jar treesub.ancestral.ParseRST $OUTDIR/1_process_seqs $OUTDIR/4_ancestral_seqs $OUTDIR/5_annotate_tree &> $OUTDIR/logs/5_annotate_tree.log

}


# 6) find_recurrent()
# Uses Muttree_findRecurrent.py to remap mutation positions to their actual protein coordinates
# and identify recurrent mutations
find_recurrent() {

    # Create directory for output files
    mkdir -p $OUTDIR/Output
    
    # Run Muttree_findRecurrent.py
    echo -e "    Log file in $OUTDIR/logs/6_find_recurrent.log"
    Muttree_findRecurrent.py $GENES $OUTDIR/5_annotate_tree $OUTDIR/Output &> $OUTDIR/logs/6_find_recurrent.log

}


################################### END OF FUNCTIONS ####################################



# Check that dependencies (RAxML, PAML, Java) and muttree are installed
which raxmlHPC-PTHREADS-SSE3 > /dev/null || { echo -e "\nERROR: raxmlHPC-PTHREADS-SSE3: command not found. Please install raxmlHPC-PTHREADS-SSE3 and add its directory to your PATH.\n" >&2; exit 1; }
which raxmlHPC-SSE3 > /dev/null || { echo -e "\nERROR: raxmlHPC-SSE3: command not found. Please install raxmlHPC-SSE3 and add its directory to your PATH.\n" >&2; exit 1; }
which java >/dev/null || { echo -e "\nERROR: java: command not found. Please install a Java runtime (1.6+) and add its directory to your PATH.\n" >&2; exit 1; }
which Muttree_findRecurrent.py >/dev/null || { echo -e "\nERROR: muttree directory not included in the PATH. Please add the muttree/src directory to your PATH environment variable.\n" >&2; exit 1; }



# If no arguments (or -h): print help
if [ "$#" -eq 0 ]; then
    print_help
    exit 0
fi


# Parse input
SEQS=""
GENES=""
OUTDIR=""
RAXMLOPT="no"
ANCESTOPT="no"
CPUS=1
while getopts ":i:o:g:t:r:a:hv?" OPT; do
  case $OPT in
    i)
      SEQS=$OPTARG
      ;;
    o)
      OUTDIR=$OPTARG
      ;;
    g)
      GENES=$OPTARG
      ;;
    t)
      CPUS=$OPTARG
      ;;
    r)
      RAXMLOPT=$OPTARG
      ;;
    a)
      ANCESTOPT=$OPTARG
      ;;
    h)
      print_help
      exit 0
      ;;
    v)
      echo "muttree-$VERSION"
      exit 0
      ;;
    \?)
      print_help
      echo -e "Invalid option: -$OPTARG\n" >&2
      exit 1
      ;;
  esac
done


# Check that all mandatory inputs are present
if [ -z "$SEQS" ]; then
   print_help
   echo -e "Input nucleotide sequence FASTA file (-i) is required\n" >&2
   exit 1
fi

if [ -z "$GENES" ]; then
   print_help
   echo -e "Input gene table file (-g) is required\n" >&2
   exit 1
fi

if [ -z "$OUTDIR" ]; then
   print_help
   echo -e "Path to output folder (-o) is required\n" >&2
   exit 1
fi


# Sanity checks 
# Check that: Input files exist; PAML custom options are valid; RAxML custom options are valid; CPUS >0
if [ ! -s $SEQS ]; then
    echo -e "\nERROR: Input sequence FASTA file not found or empty. Please check the path.\n" >&2
    exit 1
fi

if [ ! -s $GENES ]; then
    echo -e "\nERROR: Gene table file not found or empty. Please check the path.\n" >&2
    exit 1
fi

if [ "$RAXMLOPT" != "no" ] && echo "$RAXMLOPT" | grep -q -E " \-s | \-n | \-w | \-T "; then
    echo -e "\nERROR: Custom RAxML options cannot include -s, -n, -w or -T.\n" >&2
    exit 1
fi

if [ "$ANCESTOPT" != "no" ] && echo "$ANCESTOPT" | grep -q -E " \-s | \-n | \-w | \-T | \-f "; then
    echo -e "\nERROR: Custom options for ancestral sequence reconstruction cannot include -f, -s, -n, -w or -T.\n" >&2
    exit 1
fi

if ! [[ $CPUS =~ ^[1-9]+[0-9]*$ ]]; then
    echo -e "\nERROR: Number of CPUs must be greater than 0\n" >&2
    exit 1
fi


# Choose RAxML version to use depending on number of CPUs
if [ $CPUS -gt 1 ]; then
    RAXML="raxmlHPC-PTHREADS-SSE3"
else
    RAXML="raxmlHPC-SSE3"
fi



# START RUNNING
# Copy all standard out and standard error to log file
mkdir -p $OUTDIR/logs
exec &> >(tee -ia $OUTDIR/logs/muttree_`date +"%y%m%d%H%M"`.log)

echo -e "\nThis is muttree $VERSION\n"

echo "Input sequence FASTA:     $SEQS"
echo "Input gene table:         $GENES"
echo "Custom RAXML options:     $RAXMLOPT"
echo "Custom options for ASR:   $ANCESTOPT"
echo "Number of CPUs to use:    $CPUS"
echo "Output directory:         $OUTDIR"


# Check if there is a checkpoint file from a previous run in the output folder
STEP=0
if [ -s $OUTDIR/logs/CHECKPOINT ]; then
    CHK=`tail -1 $OUTDIR/logs/CHECKPOINT`
    STEP=`echo $CHK | cut -f1 -d" "`
    STEPNAME=`echo $CHK | cut -f2 -d" "`
    echo -e "\n*CHECKPOINT FILE FOUND*"
    echo "Resuming execution after last completed step: $STEPNAME"
fi


echo -e "\nExecution started on `date`\n"


# Each step is performed only if its index is higher than STEP (last finished step index)
# 1. PROCESS INPUT SEQUENCE FILE
if [ "$STEP" -lt 1 ]; then

    echo -e "\n(1) PROCESSING INPUT SEQUENCE FILE"
    process_seqs
    
    # Check successful execution
    check_file $OUTDIR/1_process_seqs/alignment.names
    check_file $OUTDIR/1_process_seqs/alignment.raxml.phylip

    # Update checkpoint file
    echo -e "    Success"
    echo "1 process_seqs" >> $OUTDIR/logs/CHECKPOINT
    
fi


# 2. RUN RAXML TO GENERATE A MAXIMUM LIKELIHOOD TREE
if [ "$STEP" -lt 2 ]; then

    echo -e "\n(2) CONSTRUCTING A MAXIMUM LIKELIHOOD TREE"
    build_tree
    
    # Check successful execution
    check_file $OUTDIR/2_build_tree/RAxML_bestTree.RECON
    
    # Update checkpoint file
    echo -e "    Success"
    echo "2 build_tree" >> $OUTDIR/logs/CHECKPOINT

fi


# 3. ROOT THE RAXML ML TREE USING THE REFERENCE SEQUENCE
if [ "$STEP" -lt 3 ]; then

    echo -e "\n(3) ROOTING THE MAXIMUM LIKELIHOOD TREE AT THE REFERENCE SEQUENCE"
    root_tree
    
    # Check successful execution
    check_file $OUTDIR/3_root_tree/RAxML_bestTree.RECON.rooted
    
    # Update checkpoint file
    echo -e "    Success"
    echo "3 root_tree" >> $OUTDIR/logs/CHECKPOINT

fi


# 4. RUN RAXML TO PERFORM ANCESTRAL SEQUENCE RECONSTRUCTION
if [ "$STEP" -lt 4 ]; then

    echo -e "\n(4) PERFORMING MARGINAL ANCESTRAL SEQUENCE RECONSTRUCTION"
    ancestral_seqs
    
    # Check successful execution
    check_file $OUTDIR/4_ancestral_seqs/RAxML_marginalAncestralStates.ASR
    check_file $OUTDIR/4_ancestral_seqs/RAxML_nodeLabelledRootedTree.ASR
    
    # Update checkpoint file
    echo -e "    Success"
    echo "4 ancestral_seqs" >> $OUTDIR/logs/CHECKPOINT

fi


# 5. ANNOTATE MUTATIONS IN EACH TREE BRANCH
if [ "$STEP" -lt 5 ]; then

    echo -e "\n(5) ANNOTATING MUTATIONS IN EACH TREE BRANCH"
    annotate_tree
    
    # Check successful execution
    check_file $OUTDIR/5_annotate_tree/substitutions.tree
    check_file $OUTDIR/5_annotate_tree/substitutions.tsv
    
    # Update checkpoint file
    echo -e "    Success"
    echo "5 annotate_tree" >> $OUTDIR/logs/CHECKPOINT

fi


# 6. IDENTIFY RECURRENT MUTATIONS
if [ "$STEP" -lt 6 ]; then

    echo -e "\n(6) IDENTIFYING RECURRENT MUTATIONS"
    find_recurrent
    
    # Check successful execution
    check_file $OUTDIR/Output/Muttree_Substitutions.tsv
    check_file $OUTDIR/Output/Muttree_Substitutions.tree
    check_file $OUTDIR/Output/Muttree_Recurrent_Substitutions.tree
    
    # Update checkpoint file
    echo -e "    Success"
    echo "6 find_recurrent" >> $OUTDIR/logs/CHECKPOINT

fi


echo -e "\n\nExecution finished on `date`"

echo -e "\nALL DONE!"
echo -e "Output is in: $OUTDIR/Output\n"

